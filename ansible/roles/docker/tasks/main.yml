# use files parameter to use multiple docker-compose.yml files
# - name: deploy Docker Compose stack
#   community.docker.docker_compose:
#     project_src: /somewhere/yourproject
#     files:
#     - docker-compose.yml
#     - docker-compose.prod.yml

# - name: Starting up service with docker compose
#   hosts: localhost
#   gather_facts: no
#   tasks:
#     - docker_compose:
#         project_src: flask
#         state: absent

#     - docker_compose:
#         project_name: flask
#         definition:
#           version: '2'
#           services:
#             db:
#               image: postgres
#             web:
#               build: "{{ playbook_dir }}/flask"
#               command: "python manage.py runserver 0.0.0.0:8000"
#               volumes:
#                 - "{{ playbook_dir }}/flask:/code"
#               ports:
#                 - "8000:8000"
#               depends_on:
#                 - db
#       register: output

#     - debug:
#         var: output

#     - assert:
#         that:
#           - "web.flask_web_1.state.running"
#           - "db.flask_db_1.state.running"


# - name: Install docker
#   ansible.builtin.shell: curl -sSL https://get.docker.com | sh
#   become: true

- name: Download .sh File
  ansible.builtin.get_url:
    url: https://get.docker.com
    dest: /tmp/docker.sh

- name: Run .sh File
  ansible.builtin.shell:
    cmd: cat /tmp/docker.sh | sh -s -- -y    

- name: Setting up docker to work without sudo
  become: yes
  become_method: sudo
  ansible.builtin.shell: groupadd docker

- name: Setting up docker to work without sudo
  become: yes
  become_method: sudo 
  ansible.builtin.shell: usermod -aG docker $USER


- name: Install Docker Module for Python
  pip:
    name:
      - docker
      - docker-compose 

- docker_compose:
    project_name: downloadServer
    definition:
      version: "2.1"
      services:
        sonarr:
          image: "linuxserver/sonarr:{{image_version}}"
          container_name: sonarr
          environment:
            - PUID=1000
            - PGID=1000
            - TZ="{{time_zone}}"
            - UMASK_SET=022 #optional
          volumes:
            - "{{base_path}}/{{config_dir}}/sonarr:/config"
            - "{{base_path}}/{{series_dir}}:/tv"
            - "{{base_path}}/{{downloads_dir}}:/downloads"
          ports:
            - 8989:8989
          restart: unless-stopped
        jackett:
          image: "linuxserver/jackett:{{image_version}}"
          container_name: jackett
          environment:
            - PUID=1000
            - PGID=1000
            - TZ="{{time_zone}}"
          volumes:
            - "{{base_path}}/{{config_dir}}/jackett:/config"
          ports:
            - 9117:9117
          restart: unless-stopped
        # any torrnet client can be used. 
        qbittorrent:
          image: "linuxserver/qbittorrent:{{image_version}}"
          container_name: qbittorrent
          environment:
            - PUID=1000
            - PGID=1000
            - TZ="{{time_zone}}"
            - UMASK_SET=022
            - WEBUI_PORT=8080
          volumes:
            - "{{base_path}}/{{config_dir}}/qbittorrent:/config"
            - "{{base_path}}/{{downloads_dir}}:/downloads"
          ports:
            - 6881:6881
            - 6881:6881/udp
            - 8080:8080
          restart: unless-stopped
        # nzbhydra2 not needed just a nice to have.
        nzbhydra2:
          image: "linuxserver/nzbhydra2:{{image_version}}"
          container_name: nzbhydra2
          environment:
            - PUID=1000
            - PGID=1000
            - TZ="{{time_zone}}"
          volumes:
            - "{{base_path}}/{{config_dir}}/nzbhydra2:/config"
          ports:
            - 5076:5076
          restart: unless-stopped
        radarr:
          image: "linuxserver/radarr:{{image_version}}"
          container_name: radarr
          environment:
            - PUID=1000
            - PGID=1000
            - TZ="{{time_zone}}"
          volumes:
            - "{{base_path}}/{{config_dir}}/radarr:/config"
            - "{{base_path}}/{{movies_dir}}:/movies"
            - "{{base_path}}/{{downloads_dir}}:/downloads"
          ports:
            - 7878:7878
          restart: unless-stopped

# - debug:
#     var: output

# - assert:
#     that:
#       - "sonarr.sonarr.state.running"
#       - "jackett.jackett.state.running"
#       - "qbittorrent.qbittorrent.state.running"
#       - "nzbhydra2.nzbhydra2.state.running"
#       - "radarr.radarr.state.running"
      